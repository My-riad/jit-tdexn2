name: Backend Continuous Deployment

# Trigger on manual workflow dispatch or pushes to main branches/tags
on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - develop
      - staging
      - main
    tags:
      - v*  # Any version tag

# Define environment variables used across jobs
env:
  AWS_REGION: us-east-1  # Default AWS region
  ECR_REPOSITORY_PREFIX: freight-optimization  # ECR repository prefix
  SERVICES: >-
    api-gateway
    auth-service
    cache-service
    data-service
    driver-service
    event-bus
    gamification-service
    integration-service
    load-matching-service
    load-service
    market-intelligence-service
    notification-service
    optimization-engine
    tracking-service

jobs:
  # Job to determine which environment to deploy to
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-env.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Determine environment and version
        id: set-env
        run: |
          # Set version based on tag or commit
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/staging ]]; then
            echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/develop ]]; then
            echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
          echo "Selected environment: ${{ steps.set-env.outputs.environment }}"
          echo "Selected version: ${{ steps.set-env.outputs.version }}"

  # Job to build and push Docker images for all backend services
  build-and-push:
    needs: determine-environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          api-gateway,
          auth-service, 
          cache-service,
          data-service,
          driver-service,
          event-bus,
          gamification-service,
          integration-service,
          load-matching-service,
          load-service,
          market-intelligence-service,
          notification-service,
          optimization-engine,
          tracking-service
        ]
      # Allow other services to continue building if one fails
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }}:${{ needs.determine-environment.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Save image URI to artifact
        run: |
          mkdir -p /tmp/image-uris
          echo "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }}:${{ needs.determine-environment.outputs.version }}" > /tmp/image-uris/${{ matrix.service }}
          
      - name: Upload image URI artifact
        uses: actions/upload-artifact@v3
        with:
          name: image-uris
          path: /tmp/image-uris
          retention-days: 1
          
  # Job to deploy to development environment
  deploy-dev:
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.environment == 'dev'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download image URIs
        uses: actions/download-artifact@v3
        with:
          name: image-uris
          path: /tmp/image-uris
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name freight-optimization-dev --region ${{ env.AWS_REGION }}
          
      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
      - name: Update deployment manifests
        working-directory: ./k8s/overlays/dev
        run: |
          # Create array of services from environment variable
          readarray -t SERVICES_ARRAY <<< "$SERVICES"
          
          # Update kustomize overlays with new image tags
          for service in "${SERVICES_ARRAY[@]}"; do
            service=$(echo "$service" | xargs)  # Trim whitespace
            if [ -f "/tmp/image-uris/$service" ]; then
              image_uri=$(cat "/tmp/image-uris/$service")
              echo "Updating image for $service to $image_uri"
              kustomize edit set image $service=$image_uri
            else
              echo "Warning: No image URI found for $service"
            fi
          done
          
      - name: Deploy to development environment
        run: |
          # Apply changes using kustomize
          kubectl apply -k ./k8s/overlays/dev
          
      - name: Verify deployment
        run: |
          # Create array of services from environment variable
          readarray -t SERVICES_ARRAY <<< "$SERVICES"
          
          # Check deployment status for each service
          for service in "${SERVICES_ARRAY[@]}"; do
            service=$(echo "$service" | xargs)  # Trim whitespace
            echo "Verifying deployment for $service..."
            kubectl rollout status deployment/${service} -n freight-optimization-dev --timeout=300s || exit 1
          done
        
  # Job to deploy to staging environment
  deploy-staging:
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download image URIs
        uses: actions/download-artifact@v3
        with:
          name: image-uris
          path: /tmp/image-uris
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name freight-optimization-staging --region ${{ env.AWS_REGION }}
          
      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
      - name: Update deployment manifests
        working-directory: ./k8s/overlays/staging
        run: |
          # Create array of services from environment variable
          readarray -t SERVICES_ARRAY <<< "$SERVICES"
          
          # Update kustomize overlays with new image tags
          for service in "${SERVICES_ARRAY[@]}"; do
            service=$(echo "$service" | xargs)  # Trim whitespace
            if [ -f "/tmp/image-uris/$service" ]; then
              image_uri=$(cat "/tmp/image-uris/$service")
              echo "Updating image for $service to $image_uri"
              kustomize edit set image $service=$image_uri
            else
              echo "Warning: No image URI found for $service"
            fi
          done
          
      - name: Deploy to staging environment
        run: |
          # Apply changes using kustomize
          kubectl apply -k ./k8s/overlays/staging
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Run integration tests
        run: |
          # Run integration tests against staging environment
          cd integration-tests
          npm install
          npm run test:staging
          
      - name: Verify deployment
        run: |
          # Create array of services from environment variable
          readarray -t SERVICES_ARRAY <<< "$SERVICES"
          
          # Check deployment status for each service
          for service in "${SERVICES_ARRAY[@]}"; do
            service=$(echo "$service" | xargs)  # Trim whitespace
            echo "Verifying deployment for $service..."
            kubectl rollout status deployment/${service} -n freight-optimization-staging --timeout=300s || exit 1
          done
          
  # Job to deploy to production environment
  deploy-production:
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download image URIs
        uses: actions/download-artifact@v3
        with:
          name: image-uris
          path: /tmp/image-uris
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name freight-optimization-production --region ${{ env.AWS_REGION }}
          
      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
      - name: Prepare for canary deployment
        working-directory: ./k8s/overlays/production
        run: |
          # Create array of services from environment variable
          readarray -t SERVICES_ARRAY <<< "$SERVICES"
          
          # Update kustomize overlays with new image tags
          for service in "${SERVICES_ARRAY[@]}"; do
            service=$(echo "$service" | xargs)  # Trim whitespace
            if [ -f "/tmp/image-uris/$service" ]; then
              image_uri=$(cat "/tmp/image-uris/$service")
              echo "Updating image for $service to $image_uri"
              kustomize edit set image $service=$image_uri
            else
              echo "Warning: No image URI found for $service"
            fi
          done
          
      - name: Deploy canary (10% traffic)
        working-directory: ./k8s/canary
        run: |
          # For each service, apply canary configuration
          readarray -t SERVICES_ARRAY <<< "$SERVICES"
          
          for service in "${SERVICES_ARRAY[@]}"; do
            service=$(echo "$service" | xargs)  # Trim whitespace
            if [ -f "./canary-${service}-10.yaml" ]; then
              kubectl apply -f ./canary-${service}-10.yaml
            fi
          done
          
      - name: Monitor canary deployment
        id: monitoring
        run: |
          # Wait for some time to collect metrics
          echo "Collecting metrics from canary deployment for 5 minutes..."
          sleep 300
          
          # This would typically call a script that checks metrics from Prometheus, Datadog, CloudWatch, etc.
          # For example:
          # error_rate=$(curl -s "https://metrics.example.com/api/error-rate?deployment=canary")
          # latency_p95=$(curl -s "https://metrics.example.com/api/latency-p95?deployment=canary")
          
          # For this template, we'll simulate a successful check
          # In production, we'd have actual metric checks here
          
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Rollout to production
        if: steps.monitoring.outputs.status == 'success'
        run: |
          # When canary looks good, apply the full deployment
          kubectl apply -k ./k8s/overlays/production
          
          # Update canary to 100% for all services
          readarray -t SERVICES_ARRAY <<< "$SERVICES"
          
          for service in "${SERVICES_ARRAY[@]}"; do
            service=$(echo "$service" | xargs)  # Trim whitespace
            if [ -f "./k8s/canary/canary-${service}-100.yaml" ]; then
              kubectl apply -f ./k8s/canary/canary-${service}-100.yaml
            fi
          done
          
      - name: Rollback on failure
        if: steps.monitoring.outputs.status != 'success'
        run: |
          # Rollback to previous version for all services
          readarray -t SERVICES_ARRAY <<< "$SERVICES"
          
          for service in "${SERVICES_ARRAY[@]}"; do
            service=$(echo "$service" | xargs)  # Trim whitespace
            echo "Rolling back $service..."
            kubectl rollout undo deployment/${service} -n freight-optimization-production
          done
          
          exit 1  # Fail the job to prevent further steps
          
      - name: Verify production deployment
        run: |
          # Create array of services from environment variable
          readarray -t SERVICES_ARRAY <<< "$SERVICES"
          
          # Check deployment status for each service
          for service in "${SERVICES_ARRAY[@]}"; do
            service=$(echo "$service" | xargs)  # Trim whitespace
            echo "Verifying deployment for $service..."
            kubectl rollout status deployment/${service} -n freight-optimization-production --timeout=300s || exit 1
          done
          
  # Job to send notifications after deployment
  notify-deployment:
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Determine deployment status
        id: deployment-status
        run: |
          # Determine which deployment job ran and was successful
          if [[ "${{ needs.deploy-dev.result }}" == "success" || "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
          # Determine environment 
          if [[ "${{ needs.deploy-dev.result }}" == "success" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "message=Deployment to development environment completed successfully" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "message=Deployment to staging environment completed successfully" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "message=Deployment to production environment completed successfully" >> $GITHUB_OUTPUT
          else
            echo "environment=unknown" >> $GITHUB_OUTPUT
            echo "message=Deployment failed" >> $GITHUB_OUTPUT
          fi
          
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            :rocket: *Deployment Update*
            *Status:* ${{ steps.deployment-status.outputs.status == 'success' && ':white_check_mark: Success' || ':x: Failure' }}
            *Environment:* ${{ steps.deployment-status.outputs.environment }}
            *Message:* ${{ steps.deployment-status.outputs.message }}
            *Workflow:* ${{ github.workflow }}
            *Triggered by:* ${{ github.actor }}
            *Commit:* ${{ github.repository }}@${{ github.sha }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}