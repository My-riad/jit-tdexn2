name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'

env:
  NODE_VERSION: 18.x
  WORKING_DIRECTORY: src/backend

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint

      - name: Run TypeScript type checking
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx tsc --noEmit

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: freight_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:unit

      - name: Run integration tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:integration
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/freight_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Generate coverage report
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:coverage
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/freight_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ env.WORKING_DIRECTORY }}/coverage
          flags: backend
          fail_ci_if_error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm audit --production --audit-level=high

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        with:
          args: --file=${{ env.WORKING_DIRECTORY }}/package.json --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    strategy:
      matrix:
        service: [
          api-gateway,
          auth-service,
          cache-service,
          data-service,
          driver-service,
          event-bus,
          gamification-service,
          integration-service,
          load-matching-service,
          load-service,
          market-intelligence-service,
          notification-service,
          optimization-engine,
          tracking-service
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Build service
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build:${{ matrix.service }}

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-dist
          path: src/backend/${{ matrix.service }}/dist

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - name: Check build status
        id: check
        run: echo "status=${{ needs.build.result == 'success' && needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.lint.result == 'success' && 'success' || 'failure' }}" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: Backend CI Result
          SLACK_MESSAGE: 'Backend CI pipeline completed with status: ${{ steps.check.outputs.status }}'
          SLACK_COLOR: ${{ steps.check.outputs.status == 'success' && 'good' || 'danger' }}
          SLACK_FOOTER: 'AI-driven Freight Optimization Platform'