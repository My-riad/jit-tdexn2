apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-matching-service
  namespace: default
  labels:
    app: load-matching-service
    component: load-matching
    part-of: freight-optimization
  annotations:
    description: 'Load Matching Service for the AI-driven Freight Optimization Platform'
spec:
  replicas: 2
  selector:
    matchLabels:
      app: load-matching-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: load-matching-service
        component: load-matching
        part-of: freight-optimization
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - load-matching-service
              topologyKey: kubernetes.io/hostname
      containers:
      - name: load-matching-service
        image: freight-optimization/load-matching-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3004
          protocol: TCP
        resources:
          requests:
            cpu: '0.5'
            memory: '1Gi'
          limits:
            cpu: '1'
            memory: '2Gi'
        envFrom:
        - configMapRef:
            name: load-matching-service-config
        env:
        - name: NODE_ENV
          value: production
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      terminationGracePeriodSeconds: 60