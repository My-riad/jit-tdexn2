apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-service
  namespace: default
  labels:
    app: data-service
    component: data-service
    part-of: freight-optimization
  annotations:
    description: "Data Service for analytics, reporting, and data export operations"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: data-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: data-service
        component: data-service
        part-of: freight-optimization
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: data-service
        image: "{{ .Values.image.repository }}/data-service:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: LOG_LEVEL
        - name: DATA_WAREHOUSE_HOST
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: DATA_WAREHOUSE_HOST
        - name: DATA_WAREHOUSE_PORT
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: DATA_WAREHOUSE_PORT
        - name: DATA_WAREHOUSE_DB
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: DATA_WAREHOUSE_DB
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: REDIS_PORT
        - name: ANALYTICS_CACHE_TTL
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: ANALYTICS_CACHE_TTL
        - name: MAX_EXPORT_ROWS
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: MAX_EXPORT_ROWS
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: AWS_REGION
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: data-service-config
              key: S3_BUCKET
        - name: DATA_WAREHOUSE_USER
          valueFrom:
            secretKeyRef:
              name: data-service-secrets
              key: DATA_WAREHOUSE_USER
        - name: DATA_WAREHOUSE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: data-service-secrets
              key: DATA_WAREHOUSE_PASSWORD
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: data-service-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: data-service-secrets
              key: AWS_SECRET_ACCESS_KEY
        resources:
          requests:
            cpu: "1"
            memory: "4Gi"
          limits:
            cpu: "2"
            memory: "8Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /usr/src/app/config
        - name: templates-volume
          mountPath: /usr/src/app/templates
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: data-service-config
      - name: templates-volume
        configMap:
          name: data-service-templates
      - name: tmp-volume
        emptyDir: {}
      nodeSelector:
        role: data-processing
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - data-service
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000