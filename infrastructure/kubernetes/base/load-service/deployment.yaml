apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-service
  namespace: default
  labels:
    app: load-service
    component: backend
    part-of: freight-optimization
  annotations:
    description: Load Service for managing load lifecycle from creation to delivery, including status tracking and documentation
spec:
  replicas: 2
  selector:
    matchLabels:
      app: load-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: load-service
        component: backend
        part-of: freight-optimization
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: load-service
        image: {{ .Values.image.repository }}/load-service:{{ .Values.image.tag }}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          value: production
        - name: PORT
          value: "3000"
        - name: ENABLE_SWAGGER
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: ENABLE_SWAGGER
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: LOG_LEVEL
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: load-service-secrets
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: load-service-secrets
              key: DB_PASSWORD
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: KAFKA_BROKERS
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: REDIS_PORT
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: S3_BUCKET
        - name: S3_REGION
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: S3_REGION
        - name: LOAD_TOPIC
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: LOAD_TOPIC
        - name: LOAD_STATUS_TOPIC
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: LOAD_STATUS_TOPIC
        - name: LOAD_DOCUMENT_BUCKET
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: LOAD_DOCUMENT_BUCKET
        - name: LOAD_CACHE_TTL
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: LOAD_CACHE_TTL
        - name: ENABLE_TMS_INTEGRATION
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: ENABLE_TMS_INTEGRATION
        - name: TMS_SYNC_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: load-service-config
              key: TMS_SYNC_INTERVAL
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: load-service-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: load-service-secrets
              key: AWS_SECRET_ACCESS_KEY
        resources:
          requests:
            cpu: "0.5"
            memory: "1Gi"
          limits:
            cpu: "1"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /usr/src/app/config
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: load-service-config
      - name: tmp-volume
        emptyDir: {}
      nodeSelector:
        role: application
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - load-service
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000