apiVersion: apps/v1
kind: Deployment
metadata:
  name: gamification-service
  namespace: default
  labels:
    app: gamification-service
    component: gamification
    part-of: freight-optimization
  annotations:
    description: "Gamification Service for the AI-driven Freight Optimization Platform"
spec:
  replicas: 2  # Start with 2 replicas, will be managed by HPA
  selector:
    matchLabels:
      app: gamification-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero-downtime deployment
  template:
    metadata:
      labels:
        app: gamification-service
        component: gamification
        part-of: freight-optimization
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3004"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: gamification-service
        image: "{{ .Values.image.repository }}/gamification-service:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3004
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3004"
        # Database connection details
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: POSTGRES_DB
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: REDIS_PORT
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: KAFKA_BROKERS
        - name: KAFKA_CLIENT_ID
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: KAFKA_CLIENT_ID
        # Scoring weights
        - name: SCORE_WEIGHT_EMPTY_MILES
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: SCORE_WEIGHT_EMPTY_MILES
        - name: SCORE_WEIGHT_NETWORK
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: SCORE_WEIGHT_NETWORK
        - name: SCORE_WEIGHT_ON_TIME
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: SCORE_WEIGHT_ON_TIME
        - name: SCORE_WEIGHT_HUB
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: SCORE_WEIGHT_HUB
        - name: SCORE_WEIGHT_FUEL
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: SCORE_WEIGHT_FUEL
        # Leaderboard configuration
        - name: LEADERBOARD_UPDATE_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: LEADERBOARD_UPDATE_INTERVAL
        # Achievement configuration
        - name: ACHIEVEMENT_CHECK_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: ACHIEVEMENT_CHECK_INTERVAL
        # Bonus zone configuration
        - name: BONUS_ZONE_UPDATE_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: BONUS_ZONE_UPDATE_INTERVAL
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: gamification-service-config
              key: LOG_LEVEL
        resources:
          requests:
            cpu: "0.5"
            memory: "1Gi"
          limits:
            cpu: "1"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: gamification-service-config
      - name: tmp-volume
        emptyDir: {}
      nodeSelector:
        role: application
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - gamification-service
              topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 60
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000