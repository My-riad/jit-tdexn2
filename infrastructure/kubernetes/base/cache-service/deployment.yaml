apiVersion: apps/v1
kind: Deployment
metadata:
  name: cache-service
  namespace: default
  labels:
    app: cache-service
    component: cache-service
    part-of: freight-optimization
  annotations:
    description: "Cache Service for the AI-driven Freight Optimization Platform"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cache-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: cache-service
        component: cache-service
        part-of: freight-optimization
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3020"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: cache-service
        image: "{{ .Values.image.repository }}/cache-service:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3020
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3020"
        - name: CACHE_DEFAULT_TTL
          value: "1800"
        - name: CACHE_MAX_SIZE
          value: "1024"
        - name: CACHE_CHECK_PERIOD
          value: "60"
        - name: CACHE_ENABLE_COMPRESSION
          value: "true"
        - name: REDIS_HOST
          value: "redis-master"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        - name: REDIS_CLUSTER_ENABLED
          value: "false"
        - name: REDIS_SENTINEL_ENABLED
          value: "false"
        - name: REDIS_TLS_ENABLED
          value: "false"
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            cpu: "0.25"
            memory: "512Mi"
          limits:
            cpu: "0.5"
            memory: "1Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tmp-volume
        emptyDir: {}
      nodeSelector:
        role: application
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cache-service
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000